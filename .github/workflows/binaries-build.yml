---
name: Task - Build binaries and publish

on:
  workflow_dispatch:
    inputs:
      release_tag_name:
        description: "Release tag name"
        type: string
        required: true
  workflow_call:
    inputs:
      release_tag_name:
        description: "Release tag name"
        type: string
        required: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        build:
          - aarch64-apple-darwin
          - aarch64-unknown-linux-gnu
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - x86_64-pc-windows-msvc
        include:
          - build: aarch64-apple-darwin
            os: macos-latest-xl
          - build: aarch64-unknown-linux-gnu
            os: ubuntu-latest-32-cores
          - build: x86_64-apple-darwin
            os: macos-latest-xl
          - build: x86_64-unknown-linux-gnu
            os: ubuntu-latest-32-cores
          - build: x86_64-pc-windows-gnu
            os: ubuntu-latest
          - build: x86_64-pc-windows-msvc
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup rust toolchain
        run: |
          rustup target add ${{ matrix.build }}

      - name: Setup build deps (linux/windows)
        if:
          matrix.build == 'x86_64-unknown-linux-gnu' || matrix.build ==
          'aarch64-unknown-linux-gnu' || matrix.build == 'x86_64-pc-windows-gnu'
        run: |
          sudo apt update
          sudo apt install -y clang llvm libudev-dev protobuf-compiler

      - name: Setup build deps (aarch64-unknown-linux-gnu)
        if: matrix.build == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt update
          sudo apt install -y g++-aarch64-linux-gnu libc6-dev-arm64-cross
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
          export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g+

      - name: Setup build deps (x86_64-apple-darwin)
        if:
          matrix.build == 'x86_64-apple-darwin' || matrix.build ==
          'aarch64-apple-darwin'
        run: |
          brew install protobuf

      - name: Setup build deps (x86_64-pc-windows-gnu)
        if: matrix.build == 'x86_64-pc-windows-gnu'
        run: |
          sudo apt update
          sudo apt install -y g++-mingw-w64-x86-64
          mkdir /tmp/madara-libs
          curl -L https://github.com/keep-starknet-strange/madara-infra/releases/download/win-bins-build-libs/libjemalloc.a --output /tmp/madara-libs/libjemalloc.a
          curl -L https://github.com/keep-starknet-strange/madara-infra/releases/download/win-bins-build-libs/rocksdb.lib --output /tmp/madara-libs/rocksdb.lib

      - name: Setup build deps (x86_64-pc-windows-msvc)
        if: matrix.build == 'x86_64-pc-windows-msvc'
        run: |
          choco install -y protoc
          mkdir C:/tmp/madara-libs
          (New-Object net.webclient).Downloadfile("https://github.com/keep-starknet-strange/madara-infra/releases/download/win-bins-build-libs/libjemalloc.a", "C:/tmp/madara-libs/libjemalloc.a")
          (New-Object net.webclient).Downloadfile("https://github.com/keep-starknet-strange/madara-infra/releases/download/win-bins-build-libs/rocksdb.lib", "C:/tmp/madara-libs/rocksdb.lib")

      - name: Build (x86_64 linux and x86_64/aarch64 apple)
        if:
          matrix.build == 'x86_64-unknown-linux-gnu' || matrix.build ==
          'x86_64-apple-darwin' || matrix.build == 'aarch64-apple-darwin'
        run: cargo build --release --target ${{ matrix.build }}

      - name: Build (aarch64-unknown-linux-gnu)
        if: matrix.build == 'aarch64-unknown-linux-gnu'
        run: |
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=/usr/bin/aarch64-linux-gnu-gcc
          export CC_aarch64_unknown_linux_gnu=/usr/bin/aarch64-linux-gnu-gcc
          export CXX_aarch64_unknown_linux_gnu=/usr/bin/aarch64-linux-gnu-g++
          cargo build --release --target ${{ matrix.build }}

      - name: Pre-Build (x86_64-pc-windows-gnu)
        if: matrix.build == 'x86_64-pc-windows-gnu'
        run: |
          cargo fetch --target ${{ matrix.build }}
          # TODO check on ci the path

      - name: Build (x86_64-pc-windows-gnu)
        if: matrix.build == 'x86_64-pc-windows-gnu'
        run: |
          export JEMALLOC_OVERRIDE=/tmp/madara-libs/libjemalloc.a
          export ROCKSDB_LIB_DIR=/tmp/madara-libs
          cargo build --release --target ${{ matrix.build }}

      - name: Pre-Build (x86_64-pc-windows-msvc)
        if: matrix.build == 'x86_64-pc-windows-msvc'
        run: |
          cargo fetch --target ${{ matrix.build }}
          # TODO check on ci the path

      - name: Build (x86_64-pc-windows-msvc)
        if: matrix.build == 'x86_64-pc-windows-msvc'
        run: |
          export JEMALLOC_OVERRIDE=C:/tmp/madara-libs/libjemalloc.a
          export ROCKSDB_LIB_DIR=C:/tmp/madara-libs
          cargo build --release --target ${{ matrix.build }}

      - name: Upload binaries
        if: github.event.inputs.release_tag_name
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.build }}
          path: target/${{ matrix.build }}/release

      - name: Upload source
        if: github.event.inputs.release_tag_name
        uses: actions/upload-artifact@v2
        with:
          name: source
          path: target/${{ matrix.build }}/release
